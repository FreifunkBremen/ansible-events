# This is the config file for Yanic written in "Tom's Obvious, Minimal Language."
# syntax: https://github.com/toml-lang/toml
# (if you need something multiple times, checkout out the [[array of table]] section)

# Send respondd request to update information
[respondd]
enable           = true
collect_interval = "20s"

# If you have custom respondd fields, you can ask Yanic to also collect these.
# NOTE: This does not automatically include these fields in the output.
#       The meshviewer-ffrgb output module will include them under "custom_fields",
#       but other modules may simply ignore them.
#[[respondd.custom_field]]
#name = zip
# You can use arbitrary GJSON expressions here, see https://github.com/tidwall/gjson
# We expect this expression to return a string.
#path = nodeinfo.location.zip

# interface that has an IP in your mesh network
[[respondd.interfaces]]
# name of interface on which this collector is running
ifname = "vl-mgmt"
# ip address which is used for sending
# (optional - without definition used a address of ifname - preferred link local)
ip_address = "fd00:42:100::10"
#send_no_request = false
#multicast_address = "ff02::2:1001"
port = 10001

# A little build-in webserver, which statically serves a directory.
# This is useful for testing purposes or for a little standalone installation.
[webserver]
enable  = true
bind    = "127.0.0.1:8080"

[webserver.prometheus]
# need webserver and respondd enabled (the exporter used the first interface
enable   = true


[nodes]
# Cache file
# a json file to cache all data collected directly from respondd
state_path    = "/root/yanic-state.json"
# prune data in RAM, cache-file and output json files (i.e. nodes.json)
# that were inactive for longer than
prune_after   = "14d"
# Export nodes and graph periodically
save_interval = "60s"
# Set node to offline if not seen within this period
offline_after = "1m"

# outputs all nodes as points into nodes.geojson
[[nodes.output.geojson]]
enable   = true
path = "/opt/web-static/map/nodes.geojson"

# definition for the new more compressed meshviewer.json
[[nodes.output.meshviewer-ffrgb]]
enable   = true
path = "/opt/web-static/map/meshviewer.json"

# definition for nodes.json
[[nodes.output.meshviewer]]
enable = false

# definition for nodelist.json
[[nodes.output.nodelist]]
enable   = false
path = "/var/www/html/meshviewer/data/nodelist.json"

# definition for prometheus-sd.json
[[nodes.output.prometheus-sd]]
enable  = true
path    = "/opt/tmp/yanic-prometheus-sd.json"
# ip = lates recieved ip, node_id = node id from host
target_address = "ip"

# Labels of the data (optional)
# [nodes.output.prometheus-sd.labels]
#labelname1 = "labelvalue 1"
## some useful e.g.:
#hosts   = "ffhb"
#service = "yanic"

###
# Disabled
###

[[nodes.output.raw]]
enable   = false

[[nodes.output.raw-jsonl]]
enable   = false

[database]
# this will send delete commands to the database to prune data
# which is older than:
delete_after    = "3650d"
# how often run the cleaning
delete_interval = "365d"


#
# Setup-InfluxDB for Breminale
# create user "ffhb-events" WITH PASSWORD [REDACTED]
# GRANT ALL ON "ffhb-events" TO  "ffhb-events";
# GRANT READ ON "ffhb-events" TO "public"

[[database.connection.influxdb]]
enable   = true
address  = "http://webserver.bremen.freifunk.net:8086"
database = "ffhb-events"
username = "ffhb-events"
password = "SECRET"

# Tagging of the data (optional)
[database.connection.influxdb.tags]
# Tags used by Yanic would override the tags from this config
# nodeid, hostname, owner, model, firmware_base, firmware_release,frequency11g and frequency11a are tags which are already used
#tagname1 = "tagvalue 1"
# some useful e.g.:
#system   = "productive"
#site     = "ffhb"


# respondd (yanic)
# forward collected respondd package to a address
# (e.g. to another respondd collector like a central yanic instance or hopglass)
[[database.connection.respondd]]
enable   = true
# type of network to create a connection
type     = "udp6"
# destination address to connect/send respondd package
address  = "[2a06:8782:ff00::f6]:11001"


###
# Disabled function
###

# Graphite settings
[[database.connection.graphite]]
enable   = false

# Logging
[[database.connection.logging]]
enable   = false
